datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

enum Role {
  ADMIN
  USER
}

enum OrderStatus {
  PENDING
  PROCESSING
  SHIPPED
  DELIVERED
  CANCELLED
}

enum SupportStatus {
  OPEN
  IN_PROGRESS
  RESOLVED
  CLOSED
}

model User {
  id            String           @id @default(uuid())
  email         String           @unique
  username      String           @unique
  passwordHash  String
  role          Role             @default(USER)
  fullName      String?
  phone         String?
  companyName   String?
  createdAt     DateTime         @default(now())
  updatedAt     DateTime         @updatedAt
  address       Address?
  orders        Order[]
  supportTickets SupportTicket[]
  supportResponses SupportResponse[]

  @@map("users")
}

model Address {
  id          String   @id @default(uuid())
  user        User     @relation(fields: [userId], references: [id])
  userId      String   @unique
  line1       String
  line2       String?
  city        String
  state       String
  postalCode  String
  country     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("addresses")
}

model Product {
  id          String            @id @default(uuid())
  name        String
  slug        String            @unique
  summary     String?
  description String?
  price       Decimal           @db.Decimal(10, 2)
  currency    String            @default("INR")
  sku         String?
  stock       Int               @default(0)
  featured    Boolean           @default(false)
  createdAt   DateTime          @default(now())
  updatedAt   DateTime          @updatedAt
  images      ProductImage[]
  videos      ProductVideo[]
  categories  ProductCategory[]
  orderItems  OrderItem[]
  catalogs    CatalogProduct[]

  @@map("products")
}

model ProductImage {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
  alt       String?
  position  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId])
  @@map("product_images")
}

model ProductVideo {
  id        String   @id @default(uuid())
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  url       String
  position  Int      @default(0)
  createdAt DateTime @default(now())

  @@index([productId])
  @@map("product_videos")
}

model Category {
  id          String            @id @default(uuid())
  name        String            @unique
  description String?
  products    ProductCategory[]

  @@map("categories")
}

model ProductCategory {
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  category  Category @relation(fields: [categoryId], references: [id])
  categoryId String

  @@id([productId, categoryId])
  @@map("product_categories")
}

model Order {
  id           String        @id @default(uuid())
  user         User          @relation(fields: [userId], references: [id])
  userId       String
  status       OrderStatus   @default(PENDING)
  total        Decimal       @db.Decimal(10, 2)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  items        OrderItem[]
  delivery     DeliveryInfo?
  supportTickets SupportTicket[]

  @@index([userId])
  @@map("orders")
}

model OrderItem {
  id        String   @id @default(uuid())
  order     Order    @relation(fields: [orderId], references: [id])
  orderId   String
  product   Product  @relation(fields: [productId], references: [id])
  productId String
  quantity  Int
  price     Decimal  @db.Decimal(10, 2)

  @@index([orderId])
  @@map("order_items")
}

model DeliveryInfo {
  id               String    @id @default(uuid())
  order            Order     @relation(fields: [orderId], references: [id])
  orderId          String    @unique
  courier          String?
  trackingNumber   String?
  status           String    @default("Preparing")
  estimatedDelivery DateTime?
  addressLine1     String
  addressLine2     String?
  city             String
  state            String
  postalCode       String
  country          String
  instructions     String?
  createdAt        DateTime  @default(now())
  updatedAt        DateTime  @updatedAt

  @@map("delivery_info")
}

model GuestOrder {
  id           String        @id @default(uuid())
  customerName String
  phone        String
  businessName String
  gst          String?
  email        String?
  status       OrderStatus   @default(PENDING)
  subtotal     Decimal       @db.Decimal(10, 2)
  totalItems   Int
  items        Json          // Store cart items as JSON
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt

  @@index([phone])
  @@index([businessName])
  @@map("guest_orders")
}

model SupportTicket {
  id        String        @id @default(uuid())
  user      User?         @relation(fields: [userId], references: [id])
  userId    String?
  order     Order?        @relation(fields: [orderId], references: [id])
  orderId   String?
  subject   String
  message   String
  status    SupportStatus @default(OPEN)
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  responses SupportResponse[]

  @@index([userId])
  @@index([orderId])
  @@map("support_tickets")
}

model SupportResponse {
  id        String   @id @default(uuid())
  ticket    SupportTicket @relation(fields: [ticketId], references: [id])
  ticketId  String
  author    User?    @relation(fields: [authorId], references: [id])
  authorId  String?
  authorRole Role
  message   String
  createdAt DateTime @default(now())

  @@index([ticketId])
  @@map("support_responses")
}

model Catalog {
  id          String           @id @default(uuid())
  title       String
  slug        String           @unique
  description String?
  category    String?
  status      String           @default("ACTIVE")
  downloads   Int              @default(0)
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  items       CatalogProduct[]

  @@map("catalogs")
}

model CatalogProduct {
  catalog    Catalog @relation(fields: [catalogId], references: [id])
  catalogId  String
  product    Product @relation(fields: [productId], references: [id])
  productId  String
  position   Int     @default(0)

  @@id([catalogId, productId])
  @@index([catalogId])
  @@index([productId])
  @@map("catalog_products")
}
